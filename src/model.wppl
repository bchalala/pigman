// Utilities

var wi = function(i, w) { return Math.exp(-w*i); }

// -----------------------

// Creating the blocks

var genBlock = function (w, h, xp, yp) {
//   var width = Math.abs(x1-x2)
//   var height = Math.abs(y1-y2)
//   var xpos = (x1+x2)/2
//   var ypos = (y1+y2)/2
  return {shape: 'rect', static: false, dims: [w, h], x:xp, y: yp}
}

var addBlock = function(yp, xDim) {
  var w = 10
  var h = 10
  var xp = gaussian(Math.floor(xDim/2), 5)
  
  return genBlock(w,h,xp,yp)
}

var addBlocks = function(n) {
  var world = [].concat(addBlock(510-(n*20), 350))

  if(n > 1)
      return addBlocks(n - 1).concat(world)
  
  return world
}

// makes a floor with evenly spaced buckets
var makeFloor = function (xmin, xmax, width) {
  return {shape: 'rect', static: true, dims: [400, 10], x: 175, y: 510}
          
}

var enforceWorldStable = function(cond) {
    return function() {
        var finalState = physics.run(1000, globalStore.world)
        condition(physics.compareShapes(globalStore.world, finalState))

        cond()
    }
}

var enforceNumBlock = function(cond) {
    return function() {
        condition(globalStore.n > 5)
        cond()
    }
}

var model = function(cond) {
    return function() {
        globalStore.world = [].concat(makeFloor(-1000, 1000, 25))
        globalStore.n = Math.floor(gaussian(5, 2))
        globalStore.world = globalStore.world.concat(addBlocks(globalStore.n))
        cond()
        return globalStore.world
    }
}

var unconditionedModel = model(function(){})
var enforcedNumBlocksModel = model(enforceNumBlock(function(){}))
var enforcedStableModel = model(enforceWorldStable(function(){}))
var enforcedStableNBlocksModel = model(enforceWorldStable(enforceNumBlock(function(){})))

var out = Infer({method: 'rejection', samples:1}, enforcedStableNBlocksModel)
//var out = Infer({method: 'MCMC', kernel: {HMC: {steps: 10, stepSize: 1}}, model:enforcedStableNBlocksModel})


// unconditionedModel()
// var finalState = physics.run(1, globalStore.world)

// display(globalStore.n)
// print(globalStore.world)
// print(finalState)
// display(physics.compareShapes(globalStore.world, finalState))

physics.animate(1000, sample(out))