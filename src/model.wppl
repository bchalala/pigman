// Utilities
print('bugprint') //thrown away

var wi = function(i, w) { return Math.exp(-w*i); }

var softeq = function(a, m, s) {
  Gaussian({mu: m, sigma: s}).score(a);
}

var getDistFactor = function(init, final, n, csum, m, s) {
  if(n == -1)
    return csum;

  return csum + softeq((init[n].x-init[n].x), m, s); + softeq((init[n].y-init[n].y), csum, m, s);
}

// -----------------------

// Creating the blocks

var genBlock = function (w, h, xp, yp) {
//   var width = Math.abs(x1-x2)
//   var height = Math.abs(y1-y2)
//   var xpos = (x1+x2)/2
//   var ypos = (y1+y2)/2
  return {shape: 'rect', static: false, dims: [w, h], x:xp, y: yp}
}

var addBlock = function(yp, xDim) {
  var w = 10
  var h = 10
  var xp = gaussian(Math.floor(xDim/2), 5)
  
  return genBlock(w,h,xp,yp)
}

var addBlocks = function(n) {
  var world = [].concat(addBlock(510-(n*20), 350))

  if(n > 1)
      return addBlocks(n - 1).concat(world)
  
  return world
}

// makes a floor with evenly spaced buckets
var makeFloor = function (xmin, xmax, width) {
  return {shape: 'rect', static: true, dims: [400, 10], x: 175, y: 510}
          
}

var encourageWorldStable = function(model) {
  return function() {
    var m = model()
    var finalState = physics.run(1000, m)
    
    factor(getDistFactor(m, finalState, m.length-1, 0, 0, 0.2))
    return m
  }
}

var enforceWorldStable = function(model) {
  return function() {
    var m = model()
    var finalState = physics.run(1000, m)
    condition(physics.compareShapes(m, finalState))
    return m
  }
}

var enforceNumBlock = function(model) {
  return function() {
    var m = model()
    condition(globalStore.n > 5)
    return m
  }
}

var model = function() {
  globalStore.scene = [].concat(makeFloor(-1000, 1000, 25))
  globalStore.n = 6 //Math.floor(gaussian(5, 2))
  globalStore.world = globalStore.scene.concat(addBlocks(globalStore.n))
  return globalStore.world
}



var unconditionedModel = model
var enforcedNumBlocksModel = enforceNumBlock(model)
var enforcedStableModel = enforceWorldStable(model)
var enforcedStableNBlocksModel = enforceWorldStable(enforceNumBlock(model))
var encourageWorldStableModel = encourageWorldStable(model)

//var out = Infer({method: 'rejection', samples:1}, encourageWorldStableModel)
var out = Infer({method: 'MCMC', samples: 10, burn: 5, lag: 5, verbose: false, kernel: {HMC: {steps: 1, stepSize: 5}}, model:enforcedStableNBlocksModel})


// unconditionedModel()
// var finalState = physics.run(1, globalStore.world)

// display(globalStore.n)
// print(globalStore.world)
// print(finalState)
// display(physics.compareShapes(globalStore.world, finalState))

// physics.animate(1000, sample(out))
print(out)